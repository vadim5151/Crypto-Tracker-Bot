from datetime import datetime



def format_event(event):
    time = event['event_time']
    currency = event['currency']
    stars = '‚òÖ' * event['importance']
    event_name = event['event_name']
    actual = event['actual']
    forecast = event['forecast']
    prev = event['prev']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ —Å–æ–±—ã—Ç–∏–∏
    date_str = ''
    if 'event_date' in event and event['event_date']:
        date_str = f" ({event['event_date']})"
   
    return (
        f'''‚è∞ <b>{time}</b>{date_str}
   üè¶ –í–∞–ª—é—Ç–∞: {currency}
   ‚≠ê –í–∞–∂–Ω–æ—Å—Ç—å: {stars}
   üìä –°–æ–±—ã—Ç–∏–µ: {event_name}
   üìà –ü—Ä–æ–≥–Ω–æ–∑: {forecast} | –ü—Ä–µ–¥.: {prev}
        '''
    )

def format_daily(today_events, tomorrow_events):
    current_time = datetime.now().strftime("%H:%M")
    
    text = f"üìä <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {current_time})\n\n"
    
    if today_events and today_events[0] != '–°–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ':
        text += f"üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b> {len(today_events)} —Å–æ–±—ã—Ç–∏–π\n"

        important_today = [event for event in today_events if event['stars'] >= 2][:3]

        for event in important_today:
            text += f"‚Ä¢ {format_event(event)}\n"
        text += "\n"

    else:
        text += "üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b> –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π\n\n"
    
    if tomorrow_events and tomorrow_events[0] != '–°–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ':
        text += f"üìÖ <b>–ó–∞–≤—Ç—Ä–∞:</b> {len(tomorrow_events)} —Å–æ–±—ã—Ç–∏–π\n"

        important_tomorrow =[event for event in tomorrow_events if event['stars'] >= 2][:3]

        for event in important_tomorrow:
            text += f"‚Ä¢ {format_event(event)}\n"
    else:
        text += "üìÖ <b>–ó–∞–≤—Ç—Ä–∞:</b> –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π"
    
    return text+'...\n –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π'

def split_text(text: str, max_length: int = 4096) -> list[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
    –°—Ç–∞—Ä–∞–µ—Ç—Å—è —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    """
    if len(text) <= max_length:
        return [text]

    parts = []
    while text:
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç —É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π
        if len(text) <= max_length:
            parts.append(text)
            break

        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
        split_index = text.rfind('\n', 0, max_length)
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å, –¥–µ–ª–∏–º –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —Å–∏–º–≤–æ–ª–∞
        if split_index == -1:
            split_index = max_length

        part = text[:split_index]
        parts.append(part)
        text = text[split_index:].lstrip()  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã —Å –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —á–∞—Å—Ç–∏

    return parts


def format_events_today(events, offset=0, limit=20, max_length=4096):
    if not events:
        return ["üìÖ <b>–ù–∞ —Å–µ–≥–æ–¥–Ω—è:</b> –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π"]

    events_to_show = events[offset:offset + limit]
    if not events_to_show:
        return ["–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞"]

    update_at = events_to_show[0]['update_at']
    base_text = f"üìä <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_at})\n\n"
    base_text += f"üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b> –ø–æ–∫–∞–∑–∞–Ω–æ {offset+1}-{offset+len(events_to_show)} –∏–∑ {len(events)}\n\n"

    event_texts = []
    for event in events_to_show:
        event_str = f"‚Ä¢ {format_event(event)}\n"
        event_texts.append(event_str)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    full_text = base_text + "".join(event_texts)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    return split_text(full_text, max_length)


def format_events_tomorrow(events, offset=0, limit=20, max_length=4096):
    if not events:
        return ["üìÖ <b>–ù–∞ –∑–∞–≤—Ç—Ä–∞:</b> –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π"]

    events_to_show = events[offset:offset + limit]
    if not events_to_show:
        return ["–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞"]

    update_at = events_to_show[0]['update_at']
    base_text = f"üìä <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_at})\n\n"
    base_text += f"üìÖ <b>–ó–∞–≤—Ç—Ä–∞:</b> –ø–æ–∫–∞–∑–∞–Ω–æ {offset+1}-{offset+len(events_to_show)} –∏–∑ {len(events)}\n\n"

    event_texts = []
    for event in events_to_show:
        event_str = f"‚Ä¢ {format_event(event)}\n"
        event_texts.append(event_str)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    full_text = base_text + "".join(event_texts)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    return split_text(full_text, max_length)


def format_events_week(events, offset=0, limit=20, max_length=4096):
    if not events:
        return ["üìÖ <b>–ù–∞ –Ω–µ–¥–µ–ª–µ:</b> –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π"]

    events_to_show = events[offset:offset + limit]
    if not events_to_show:
        return ["–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞"]

    update_at = events_to_show[0]['update_at']
    base_text = f"üìä <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_at})\n\n"
    base_text += f"üìÖ <b>–ù–∞ –Ω–µ–¥–µ–ª–µ:</b> –ø–æ–∫–∞–∑–∞–Ω–æ {offset+1}-{offset+len(events_to_show)} –∏–∑ {len(events)}\n\n"

    event_texts = []
    for event in events_to_show:
        event_str = f"‚Ä¢ {format_event(event)}\n"
        event_texts.append(event_str)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    full_text = base_text + "".join(event_texts)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    return split_text(full_text, max_length)


def sort_today_events(events, importance, offset=0, limit=20):
    if not events:
        return "üìÖ <b>–ù–∞ —Å–µ–≥–æ–¥–Ω—è:</b> –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é " +'‚≠ê'* importance
    
    events_to_show = events[offset:offset+limit]
    
    if not events_to_show:
        return "–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞"
    
    update_at = events_to_show[0]['update_at']
    text = f"üìä <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_at})\n\n"
    text += f"üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b> –ø–æ–∫–∞–∑–∞–Ω–æ {offset+1}-{offset+len(events_to_show)} –∏–∑ {len(events)} —Å–æ–±—ã—Ç–∏–π —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é {'‚≠ê' * importance}\n\n"
    
    for event in events_to_show:
        text += f"‚Ä¢ {format_event(event)}\n"
        
    return text


def sort_tomorrow_events(events, importance, offset=0, limit=20):
    if not events:
        return "üìÖ <b>–ù–∞ –∑–∞–≤—Ç—Ä–∞:</b> –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é "+'‚≠ê' * importance
    
    events_to_show = events[offset:offset+limit]
    
    if not events_to_show:
        return "–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞"
    
    update_at = events_to_show[0]['update_at']
    text = f"üìä <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_at})\n\n"
    text += f"üìÖ <b>–ó–∞–≤—Ç—Ä–∞:</b> –ø–æ–∫–∞–∑–∞–Ω–æ {offset+1}-{offset+len(events_to_show)} –∏–∑ {len(events)} —Å–æ–±—ã—Ç–∏–π —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é {'‚≠ê' * importance}\n\n"
    
    for event in events_to_show:
        text += f"‚Ä¢ {format_event(event)}\n"
        
    return text


def sort_week_events(events, importance, offset=0, limit=20):
    if not events:
        return "üìÖ <b>–ù–∞ –Ω–µ–¥–µ–ª–µ:</b> –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é " +'‚≠ê'* importance
    
    events_to_show = events[offset:offset+limit]
    
    if not events_to_show:
        return "–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞"
    
    update_at = events_to_show[0]['update_at']
    text = f"üìä <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_at})\n\n"
    text += f"üìÖ <b>–ù–∞ –Ω–µ–¥–µ–ª–µ:</b> –ø–æ–∫–∞–∑–∞–Ω–æ {offset+1}-{offset+len(events_to_show)} –∏–∑ {len(events)} —Å–æ–±—ã—Ç–∏–π —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é {'‚≠ê' * importance}\n\n"
    
    for event in events_to_show:
        text += f"‚Ä¢ {format_event(event)}\n"
        
    return text


def format_crypto_prices(coins_data, offset=0, limit=20):
    try:
        if not coins_data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"
        
        coins_to_show = coins_data[offset:offset+limit]
        
        if not coins_to_show:
            return "–ë–æ–ª—å—à–µ –Ω–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞"
        
        update_at = coins_to_show[0]['update_at']
        text = f"üí∞ <b>–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç </b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_at})\n\n"
        text += f"<i>–ü–æ–∫–∞–∑–∞–Ω–æ {offset+1}-{offset+len(coins_to_show)} –∏–∑ {len(coins_data)}</i>\n\n"
        
        for num, coin in enumerate(coins_to_show, start=offset+1):
            ticker = coin['ticker']
            name = coin['name']
            price = coin['price']
            market_cup = coin['market_cup']
            price_change_24hm = coin['price_change_24hm']
            
            change_emoji = "üìà" if float(price_change_24hm.replace('%', '').replace(',', '.').replace('‚àí', '-')) >= 0 else "üìâ"
            
            text += f"{num}) {name} ({ticker}): ${price} | {market_cup} | {change_emoji} {price_change_24hm} –∑–∞ 24—á\n"
            
        return text

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ format_crypto_prices: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"
    